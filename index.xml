<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech Nick</title>
    <link>https://blair55.github.io/</link>
    <description>Recent content on Tech Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018 Nicholas Blair</copyright>
    <lastBuildDate>Tue, 13 Apr 2021 00:42:14 +0100</lastBuildDate>
    
	<atom:link href="https://blair55.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RightResult Write Up</title>
      <link>https://blair55.github.io/blog/rightresult-write-up/</link>
      <pubDate>Tue, 13 Apr 2021 00:42:14 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/rightresult-write-up/</guid>
      <description>About the design What was the original problem or opportunity that inspired this work? RightResult is the SAAS incarnation of a game my friend would coordinate via emails and a spreadsheet.
Each week, my friend would email game members requesting predictions for the weekend&amp;rsquo;s English Premier League fixtures. He would collate the responses and fixture results into a spreadsheet. The scores would be tallied-up and communicated back to the members. The winner was who had predicted most accurately.</description>
    </item>
    
    <item>
      <title>Integration testing a locally hosted serverless project</title>
      <link>https://blair55.github.io/blog/serverless-integration-testing/</link>
      <pubDate>Sun, 10 May 2020 11:04:23 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/serverless-integration-testing/</guid>
      <description>Strategy There are many choices for running integration/functional/e2e tests with a serverless project. There are two main modes of operation for integration testing. The first is cloud-hosted infrastructure in which a temporary copy of the stack is deployed and the intregration tests are pointed at the resources. This has the benefit of increasing the scope of the integration tests to include permissions and configuration. The door is also open for security or load testing, as the target environment is almost identical to what production will be.</description>
    </item>
    
    <item>
      <title>A functional wrapper around the .net AWS DynamoDB SDK</title>
      <link>https://blair55.github.io/blog/dynamodb-functional-wrapper/</link>
      <pubDate>Fri, 29 Nov 2019 10:00:00 +0000</pubDate>
      
      <guid>https://blair55.github.io/blog/dynamodb-functional-wrapper/</guid>
      <description>We&amp;rsquo;re going to take a tour of some F# capabilities and use them to enforce the constraints of the DynamoDB client. We&amp;rsquo;ll look at domain modeling with discriminated unions, data access using the reader applicative, and error handling with the result type.
DynamoDB and Data Types Before we get started, let&amp;rsquo;s summarise DynamoDB and its supported types.
 DynamoDB is a key-value &amp;amp; document database. DynamoDB tables are schemaless so each record can contain a different number of attributes.</description>
    </item>
    
    <item>
      <title>Combining monads</title>
      <link>https://blair55.github.io/blog/combining-monads/</link>
      <pubDate>Fri, 02 Aug 2019 11:36:05 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/combining-monads/</guid>
      <description>The F# Result&amp;lt;&#39;a,&#39;b&amp;gt; type allows for concise control flow syntax. The async { ... } computation expression similarly minimizes the noise of asynchrony. Throw in the Writer monad for logging minus the intrinsic IO statements. How do you get the benefits of all three together? You need to combine&amp;hellip;
 Source code gist.
 Writer The Result and Async types are core types in F# but Writer is not so we need a bit of boilerplate to get going.</description>
    </item>
    
    <item>
      <title>Serverless package done right</title>
      <link>https://blair55.github.io/blog/serverless-package-done-right/</link>
      <pubDate>Mon, 01 Apr 2019 11:36:05 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/serverless-package-done-right/</guid>
      <description>Problem The Severless Framework package command claims to be useful in CI/CD workflows. The command results in the production of AWS Cloud Formation stack json files (or alternative cloud provider equivalent) on disk. These files can be bundled and considered the &amp;lsquo;deployment artifact&amp;rsquo; at the end of the pipeline. The artifact can be provided to the serverless deploy command that could be run at a later date.
This two-step package/deploy process is very familiar, so I was lured into using the serverless package command.</description>
    </item>
    
    <item>
      <title>Squash Git Commits</title>
      <link>https://blair55.github.io/blog/squash-git-commits/</link>
      <pubDate>Tue, 16 Oct 2018 10:36:05 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/squash-git-commits/</guid>
      <description>Ever made several commits on a feature branch and needed to rebase? Rebasing multiple commits can be tedious if there is a conflict from an early commit, requiring a commit resolution in every commit that follows. It can be practical, therefore, to squash multiple commits into a single commit before rebasing.
Ever wanted to clean up your commit history before pushing? I often make quick commits if I&amp;rsquo;m required to switch branches, or spiking an idea during development that ends up being permanent.</description>
    </item>
    
    <item>
      <title>Scripting with AWS Parameter Store</title>
      <link>https://blair55.github.io/blog/aws-parameter-store-scripting/</link>
      <pubDate>Fri, 12 Oct 2018 16:35:01 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/aws-parameter-store-scripting/</guid>
      <description>Ever need to write a short script as part of development to get feedback on a portion of code? Ever need to add private authentication values to that script? Ever wanted to add the script to source control but couldn&amp;rsquo;t because it contained your private authentication?
 Enter: AWS Parameter Store
 This AWS service acts as a key-value store. Add your private settings such as usernames, passwords, connection strings etc and they can be retrieved programatically by their key name.</description>
    </item>
    
  </channel>
</rss>