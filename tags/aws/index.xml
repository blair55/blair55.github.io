<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Tech Nick</title>
    <link>https://blair55.github.io/tags/aws/</link>
    <description>Recent content in Aws on Tech Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018 Nicholas Blair</copyright>
    <lastBuildDate>Fri, 29 Nov 2019 10:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blair55.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A functional wrapper around the .net AWS DynamoDB SDK</title>
      <link>https://blair55.github.io/blog/dynamodb-functional-wrapper/</link>
      <pubDate>Fri, 29 Nov 2019 10:00:00 +0000</pubDate>
      
      <guid>https://blair55.github.io/blog/dynamodb-functional-wrapper/</guid>
      <description>A tour of F# capabilities used to enforce the constraints of the DynamoDB client at compile time. We&amp;rsquo;ll look at domain modeling with discriminated unions, data access using the reader applicative, and error handling with the result type.
Data Types DynamoDB is a key-value &amp;amp; document database. DynamoDB tables are schemaless so each record can contain a different number of attributes. A record attribute has a string name and a value that is one of three types: Scalar, Set, and Document.</description>
    </item>
    
    <item>
      <title>Serverless package done right</title>
      <link>https://blair55.github.io/blog/serverless-package-done-right/</link>
      <pubDate>Mon, 01 Apr 2019 11:36:05 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/serverless-package-done-right/</guid>
      <description>Problem The severless framework package command claims to be useful in CI/CD workflows. The command produces cloud formation stacks json files on disk that can be bundled and considered the &amp;lsquo;deployment artifacts&amp;rsquo; at the end of the pipeline. These artifacts can be provided to the serverless deploy command that could be run at a later date.
This two-step package/deploy process is very familiar, so I was lured into using the serverless package command.</description>
    </item>
    
    <item>
      <title>Scripting with AWS Parameter Store</title>
      <link>https://blair55.github.io/blog/aws-parameter-store-scripting/</link>
      <pubDate>Fri, 12 Oct 2018 16:35:01 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/aws-parameter-store-scripting/</guid>
      <description>Ever need to write a short script as part of development to get feedback on a portion of code? Ever need to add private authentication values to that script? Ever wanted to add the script to source control but couldn&amp;rsquo;t because it contained your private authentication?
 Enter: AWS Parameter Store
 This AWS service acts as a key-value store. Add your private settings such as usernames, passwords, connection strings etc and they can be retrieved programatically by their key name.</description>
    </item>
    
  </channel>
</rss>