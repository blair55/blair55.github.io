<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on Tech Nick</title>
    <link>https://blair55.github.io/tags/aws/</link>
    <description>Recent content in aws on Tech Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 10 May 2020 11:04:23 +0100</lastBuildDate>
    
	<atom:link href="https://blair55.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Integration testing a locally hosted serverless project</title>
      <link>https://blair55.github.io/blog/serverless-integration-testing/</link>
      <pubDate>Sun, 10 May 2020 11:04:23 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/serverless-integration-testing/</guid>
      <description>Strategy There are many choices for running integration/functional/e2e tests with a serverless project. There are two main modes of operation for integration testing. The first is cloud-hosted infrastructure in which a temporary copy of the stack is deployed and the intregration tests are pointed at the resources. This has the benefit of increasing the scope of the integration tests to include permissions and configuration. The door is also open for security or load testing, as the target environment is almost identical to what production will be.</description>
    </item>
    
    <item>
      <title>A functional wrapper around the .net AWS DynamoDB SDK</title>
      <link>https://blair55.github.io/blog/dynamodb-functional-wrapper/</link>
      <pubDate>Fri, 29 Nov 2019 10:00:00 +0000</pubDate>
      
      <guid>https://blair55.github.io/blog/dynamodb-functional-wrapper/</guid>
      <description>We&amp;rsquo;re going to take a tour of some F# capabilities and use them to enforce the constraints of the DynamoDB client. We&amp;rsquo;ll look at domain modeling with discriminated unions, data access using the reader applicative, and error handling with the result type.
DynamoDB and Data Types Before we get started, let&amp;rsquo;s summarise DynamoDB and its supported types.
 DynamoDB is a key-value &amp;amp; document database. DynamoDB tables are schemaless so each record can contain a different number of attributes.</description>
    </item>
    
    <item>
      <title>Serverless package done right</title>
      <link>https://blair55.github.io/blog/serverless-package-done-right/</link>
      <pubDate>Mon, 01 Apr 2019 11:36:05 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/serverless-package-done-right/</guid>
      <description>Problem The Severless Framework package command claims to be useful in CI/CD workflows. The command results in the production of AWS Cloud Formation stack json files (or alternative cloud provider equivalent) on disk. These files can be bundled and considered the &amp;lsquo;deployment artifact&amp;rsquo; at the end of the pipeline. The artifact can be provided to the serverless deploy command that could be run at a later date.
This two-step package/deploy process is very familiar, so I was lured into using the serverless package command.</description>
    </item>
    
    <item>
      <title>Scripting with AWS Parameter Store</title>
      <link>https://blair55.github.io/blog/aws-parameter-store-scripting/</link>
      <pubDate>Fri, 12 Oct 2018 16:35:01 +0100</pubDate>
      
      <guid>https://blair55.github.io/blog/aws-parameter-store-scripting/</guid>
      <description>Ever need to write a short script as part of development to get feedback on a portion of code? Ever need to add private authentication values to that script? Ever wanted to add the script to source control but couldn&amp;rsquo;t because it contained your private authentication?
 Enter: AWS Parameter Store
 This AWS service acts as a key-value store. Add your private settings such as usernames, passwords, connection strings etc and they can be retrieved programatically by their key name.</description>
    </item>
    
  </channel>
</rss>