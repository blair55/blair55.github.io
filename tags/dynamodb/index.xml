<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamodb on Tech Nick</title>
    <link>https://blair55.github.io/tags/dynamodb/</link>
    <description>Recent content in dynamodb on Tech Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 29 Nov 2019 10:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blair55.github.io/tags/dynamodb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A functional wrapper around the .net AWS DynamoDB SDK</title>
      <link>https://blair55.github.io/blog/dynamodb-functional-wrapper/</link>
      <pubDate>Fri, 29 Nov 2019 10:00:00 +0000</pubDate>
      
      <guid>https://blair55.github.io/blog/dynamodb-functional-wrapper/</guid>
      <description>We&amp;rsquo;re going to take a tour of some F# capabilities and use them to enforce the constraints of the DynamoDB client. We&amp;rsquo;ll look at domain modeling with discriminated unions, data access using the reader applicative, and error handling with the result type.
DynamoDB and Data Types Before we get started, let&amp;rsquo;s summarise DynamoDB and its supported types.
 DynamoDB is a key-value &amp;amp; document database. DynamoDB tables are schemaless so each record can contain a different number of attributes.</description>
    </item>
    
  </channel>
</rss>